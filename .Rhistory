timeout(function() {
my_global <<- runif(1) # don't forget the double-assigment operator!
1 }) %>%
rollback(amount=1, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run
my_global
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
t1 <- trajectory() %>%
timeout(function() {
my_global <<- runif(10) # don't forget the double-assigment operator!
1 }) %>%
rollback(amount=1, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run
my_global
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
t1 <- trajectory() %>%
timeout(5) %>%
timeout(function() {
my_global <<- runif(1) # don't forget the double-assigment operator!
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run
my_global
# get_mon_arrivals(env, per_resource = T)
env <- simmer("play", verbose = TRUE)
my_global <- NA
t1 <- trajectory() %>%
timeout(5) %>%
timeout(function() {
my_global <<- runif(1) # don't forget the double-assigment operator!
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run(15)
my_global
library(dplyr)
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
signal
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
t1 <- trajectory() %>%
timeout(5) %>%
timeout(function() {
my_global <<- runif(1); # don't forget the double-assigment operator!
0
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run(15)
my_global
install.packages("simmer")
install.packages("simmer")
install.packages("simmer")
install.packages("simmer")
install.packages("simmer")
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
f1
f1()
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
t1 <- trajectory() %>%
timeout(5) %>%
timeout(function() {
my_global <<- runif(1); # don't forget the double-assigment operator!
0
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run(15)
my_global
# get_mon_arrivals(env, per_resource = T)
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5)))
}
t1 <- trajectory() %>%
initialize_customer() %>%
branch(function() {get_attribute(env,"aTaste")},
continue=c(TRUE,TRUE),
trajectory() %>% timeout(1),
trajectory() %>% timeout(5)) %>%
timeout(function() {
my_global <<- runif(1); # don't forget the double-assigment operator!
5
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,1,2)) %>%
run(15)
my_global
# get_mon_arrivals(env, per_resource = T)
arrange(get_mon_attributes(env),name,key,time)
get_mon_attributes(env)
get_mon_attributes()
get_attribute(env,"aTaste")
rm(list=ls())
env <- simmer("play", verbose = TRUE)
my_global <- NA
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5)))
}
t1 <- trajectory() %>%
initialize_customer() %>%
branch(function() {get_attribute(env,"aTaste")},
continue=c(TRUE,TRUE),
trajectory() %>% timeout(1),
trajectory() %>% timeout(5)) %>%
timeout(function() {
my_global <<- runif(1); # don't forget the double-assigment operator!
5
}) %>%
rollback(amount=2, times=10)
env %>%
add_generator("t1_", t1, at(0,0,0,0,0)) %>%
run(15)
my_global
# get_mon_arrivals(env, per_resource = T)
signal$test
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
signal$test
signal$test[signal$fuid==1]
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
id
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
env
rm(list=ls())
#1.global attr: not sure
#2.signal:
#3.regular eval: cannot modify inputs
env <- simmer("play", verbose = TRUE)
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
#assign taste preference and family id
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5))) %>%
set_attribute("fuid", function() sample(1:3,1,prob=c(0.2,0.5,0.3)))
}
f1 <- function() {
get_attribute(env,"aTaste")
}
f2 <- function() {
get_attribute(env,"fuid")
}
#main event
get_choco <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("dark") %>% seize("dark") %>% timeout(5) %>% release("dark"),
trajectory("white") %>% seize("white") %>% timeout(10) %>% release("white")
)
}
#trigger: if white, update signal
trigger <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("not") %>% timeout(0),
trajectory("yes") %>% timeout(function() {
id <- f2()
signal$test[signal$fuid==id] <<- 2; 0
})
)
}
#flip: if signal, flip taste
flip <- function(traj) {
id <- f2()
status <- signal$test[signal$fuid==id]
if(status==2) {
traj %>% branch(
f1,
continue=rep(TRUE,2),
trajectory("") %>% timeout(0),
trajectory("") %>% set_attribute("aTaste",1) %>% seize("flip") %>% release("flip")
) }
}
#wrap
toloop <- function(traj) {
traj %>% get_choco() %>% timeout(5)
}
#high-level traj
customer <-   trajectory("customer") %>%
initialize_customer()  %>%
branch( # Used branch, to prevent rollback from looking inside event loop function
function() 1,
continue=TRUE,
trajectory("main_loop") %>% toloop()
) %>%
rollback(amount=1, times=100) # Process up to 100 events per person
#register counters
counters <- c("chocolate","white","dark","flip")
create_counters <- function(env, counters)
{
sapply(counters, FUN=function(counter)
{
env <- add_resource(env, counter, Inf, 0)
})
env
}
#execution
env %>%
create_counters(counters) %>%
add_generator("customer",customer,at(rep(0, 5)), mon=2) %>%
run(50) %>% wrap()
get_mon_arrivals(env, per_resource = T)
arrange(get_mon_attributes(env),name,key,time)
rm(list=ls())
#1.global attr: not sure
#2.signal:
#3.regular eval: cannot modify inputs
env <- simmer("play", verbose = TRUE)
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
#assign taste preference and family id
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5))) %>%
set_attribute("fuid", function() sample(1:3,1,prob=c(0.2,0.5,0.3)))
}
f1 <- function() {
get_attribute(env,"aTaste")
}
f2 <- function() {
get_attribute(env,"fuid")
}
#main event
get_choco <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("dark") %>% seize("dark") %>% timeout(5) %>% release("dark"),
trajectory("white") %>% seize("white") %>% timeout(10) %>% release("white")
)
}
#trigger: if white, update signal
trigger <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("not") %>% timeout(0),
trajectory("yes") %>% timeout(function() {
id <- f2()
signal$test[signal$fuid==id] <<- 2; 0
})
)
}
#flip: if signal, flip taste
flip <- function(traj) {
id <- f2()
status <- signal$test[signal$fuid==id]
if(status==2) {
traj %>% branch(
f1,
continue=rep(TRUE,2),
trajectory("") %>% timeout(0),
trajectory("") %>% set_attribute("aTaste",1) %>% seize("flip") %>% release("flip")
) }
}
#wrap
toloop <- function(traj) {
traj %>% get_choco() %>% timeout(5)
}
#high-level traj
customer <-   trajectory("customer") %>%
initialize_customer()  %>%
trigger() %>%
branch( # Used branch, to prevent rollback from looking inside event loop function
function() 1,
continue=TRUE,
trajectory("main_loop") %>% toloop()
) %>%
rollback(amount=1, times=100) # Process up to 100 events per person
#register counters
counters <- c("chocolate","white","dark","flip")
create_counters <- function(env, counters)
{
sapply(counters, FUN=function(counter)
{
env <- add_resource(env, counter, Inf, 0)
})
env
}
#execution
env %>%
create_counters(counters) %>%
add_generator("customer",customer,at(rep(0, 5)), mon=2) %>%
run(50) %>% wrap()
get_mon_arrivals(env, per_resource = T)
arrange(get_mon_attributes(env),name,key,time)
signal
rm(list=ls())
#1.global attr: not sure
#2.signal:
#3.regular eval: cannot modify inputs
env <- simmer("play", verbose = TRUE)
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
#assign taste preference and family id
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5))) %>%
set_attribute("fuid", function() sample(1:3,1,prob=c(0.2,0.5,0.3)))
}
f1 <- function() {
get_attribute(env,"aTaste")
}
f2 <- function() {
get_attribute(env,"fuid")
}
#main event
get_choco <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("dark") %>% seize("dark") %>% timeout(5) %>% release("dark"),
trajectory("white") %>% seize("white") %>% timeout(10) %>% release("white")
)
}
#trigger: if white, update signal
trigger <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("not") %>% timeout(0),
trajectory("yes") %>% timeout(function() {
id <- f2()
signal$test[signal$fuid==id] <<- 2; 0
})
)
}
#flip: if signal, flip taste
flip <- function(traj) {
id <- f2()
status <- signal$test[signal$fuid==id]
if(status==2) {
traj %>% branch(
f1,
continue=rep(TRUE,2),
trajectory("") %>% timeout(0),
trajectory("") %>% set_attribute("aTaste",1) %>% seize("flip") %>% release("flip")
)} else {traj %>% timeout(0)}
}
#wrap
toloop <- function(traj) {
traj %>% flip() %>% get_choco() %>% timeout(5)
}
#high-level traj
customer <-   trajectory("customer") %>%
initialize_customer()  %>%
trigger() %>%
branch( # Used branch, to prevent rollback from looking inside event loop function
function() 1,
continue=TRUE,
trajectory("main_loop") %>% toloop()
) %>%
rollback(amount=1, times=100) # Process up to 100 events per person
#register counters
counters <- c("chocolate","white","dark","flip")
create_counters <- function(env, counters)
{
sapply(counters, FUN=function(counter)
{
env <- add_resource(env, counter, Inf, 0)
})
env
}
#execution
env %>%
create_counters(counters) %>%
add_generator("customer",customer,at(rep(0, 5)), mon=2) %>%
run(50) %>% wrap()
get_mon_arrivals(env, per_resource = T)
arrange(get_mon_attributes(env),name,key,time)
library(simmer.plot)
plot(customer)
rm(list=ls())
#1.global attr: not sure
#2.signal:
#3.regular eval: cannot modify inputs
env <- simmer("play", verbose = TRUE)
signal <- data.frame(fuid=c(1,2,3),test=c(1,1,1))
#assign taste preference and family id
initialize_customer <- function(traj)
{
traj %>%
set_attribute("aTaste",function() sample(1:2,1,prob=c(0.5,0.5))) %>%
set_attribute("fuid", function() sample(1:3,1,prob=c(0.2,0.5,0.3)))
}
f1 <- function() {
get_attribute(env,"aTaste")
}
f2 <- function() {
get_attribute(env,"fuid")
}
#main event
get_choco <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("dark") %>% seize("dark") %>% timeout(5) %>% release("dark"),
trajectory("white") %>% seize("white") %>% timeout(10) %>% release("white")
)
}
#trigger: if white, update signal
trigger <- function(traj) {
traj %>%
branch(f1,
continue=rep(TRUE,2),
trajectory("not") %>% timeout(0),
trajectory("yes") %>% timeout(function() {
id <- f2()
signal$test[signal$fuid==id] <<- 2; 0
})
)
}
#flip: if signal, flip taste
flip <- function(traj) {
id <- f2()
status <- signal$test[signal$fuid==id]
if(status==2) {
traj %>% branch(
f1,
continue=rep(TRUE,2),
trajectory("") %>% timeout(0),
trajectory("") %>% set_attribute("aTaste",1) %>% seize("flip") %>% release("flip")
)} else {traj %>% timeout(0)}
}
#wrap
toloop <- function(traj) {
traj %>% get_choco() %>% timeout(5)
}
#high-level traj
customer <-   trajectory("customer") %>%
initialize_customer()  %>%
trigger() %>%
branch( # Used branch, to prevent rollback from looking inside event loop function
function() 1,
continue=TRUE,
trajectory("main_loop") %>% toloop()
) %>%
rollback(amount=1, times=100) # Process up to 100 events per person
#register counters
counters <- c("chocolate","white","dark","flip")
create_counters <- function(env, counters)
{
sapply(counters, FUN=function(counter)
{
env <- add_resource(env, counter, Inf, 0)
})
env
}
#execution
env %>%
create_counters(counters) %>%
add_generator("customer",customer,at(rep(0, 5)), mon=2) %>%
run(50) %>% wrap()
get_mon_arrivals(env, per_resource = T)
arrange(get_mon_attributes(env),name,key,time)
library(simmer.plot)
plot(customer)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
signal
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/simmer_play.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
f1()
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
source('~/Desktop/simmer-play/trial.R', echo=TRUE)
